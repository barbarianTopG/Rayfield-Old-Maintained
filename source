local Release = "Release 1.0"
local NotificationDuration = 6.5;
local RayfieldFolder = "Rayfield"
local ConfigurationFolder = RayfieldFolder .. "/Configurations"
local ConfigurationExtension = ".rfld"
local RayfieldLibrary = {
	Flags = {},
	Theme = {
		Default = {
			TextFont = "Gotham",
			TextColor = Color3.fromRGB(240, 240, 240),
			Background = Color3.fromRGB(25, 25, 25),
			Topbar = Color3.fromRGB(34, 34, 34),
			Shadow = Color3.fromRGB(20, 20, 20),
			NotificationBackground = Color3.fromRGB(20, 20, 20),
			NotificationActionsBackground = Color3.fromRGB(50, 50, 50),
			TabBackground = Color3.fromRGB(80, 80, 80),
			TabStroke = Color3.fromRGB(85, 85, 85),
			TabBackgroundSelected = Color3.fromRGB(210, 210, 210),
			TabTextColor = Color3.fromRGB(240, 240, 240),
			SelectedTabTextColor = Color3.fromRGB(50, 50, 50),
			ElementBackground = Color3.fromRGB(35, 35, 35),
			ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
			SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
			ElementStroke = Color3.fromRGB(50, 50, 50),
			SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
			SliderBackground = Color3.fromRGB(25, 25, 25),
			SliderProgress = Color3.fromRGB(43, 105, 159),
			SliderStroke = Color3.fromRGB(50, 50, 50),
			ToggleBackground = Color3.fromRGB(30, 30, 30),
			ToggleEnabled = Color3.fromRGB(0, 146, 214),
			ToggleDisabled = Color3.fromRGB(100, 100, 100),
			ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
			ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
			ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
			ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),
			InputBackground = Color3.fromRGB(30, 30, 30),
			InputStroke = Color3.fromRGB(65, 65, 65),
			PlaceholderColor = Color3.fromRGB(178, 178, 178)
		},
		Light = {
			TextFont = "Gotham",
			TextColor = Color3.fromRGB(50, 50, 50),
			Background = Color3.fromRGB(245, 245, 245),
			Topbar = Color3.fromRGB(220, 220, 220),
			Shadow = Color3.fromRGB(200, 200, 200),
			NotificationBackground = Color3.fromRGB(255, 255, 255),
			NotificationActionsBackground = Color3.fromRGB(230, 230, 230),
			TabBackground = Color3.fromRGB(210, 210, 210),
			TabStroke = Color3.fromRGB(180, 180, 180),
			TabBackgroundSelected = Color3.fromRGB(0, 142, 208),
			TabTextColor = Color3.fromRGB(50, 50, 50),
			SelectedTabTextColor = Color3.fromRGB(255, 255, 255),
			ElementBackground = Color3.fromRGB(230, 230, 230),
			ElementBackgroundHover = Color3.fromRGB(220, 220, 220),
			SecondaryElementBackground = Color3.fromRGB(220, 220, 220),
			ElementStroke = Color3.fromRGB(200, 200, 200),
			SecondaryElementStroke = Color3.fromRGB(190, 190, 190),
			SliderBackground = Color3.fromRGB(220, 220, 220),
			SliderProgress = Color3.fromRGB(0, 142, 208),
			SliderStroke = Color3.fromRGB(200, 200, 200),
			ToggleBackground = Color3.fromRGB(200, 200, 200),
			ToggleEnabled = Color3.fromRGB(0, 142, 208),
			ToggleDisabled = Color3.fromRGB(150, 150, 150),
			ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
			ToggleDisabledStroke = Color3.fromRGB(175, 175, 175),
			ToggleEnabledOuterStroke = Color3.fromRGB(180, 180, 180),
			ToggleDisabledOuterStroke = Color3.fromRGB(150, 150, 150),
			InputBackground = Color3.fromRGB(220, 220, 220),
			InputStroke = Color3.fromRGB(180, 180, 180),
			PlaceholderColor = Color3.fromRGB(120, 120, 120)
		}
	}
}
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local Rayfield = game:GetObjects("rbxassetid://10804731440")[1]
Rayfield.Name = "Rayfield"
Rayfield.Enabled = false;
Rayfield.DisplayOrder = 1000;
if gethui then
	Rayfield.Parent = gethui()
elseif syn and syn.protect_gui then
	syn.protect_gui(Rayfield)
	Rayfield.Parent = CoreGui
else
	Rayfield.Parent = CoreGui
end;
for _, child in ipairs(Rayfield.Parent:GetChildren()) do
	if child.Name == "Rayfield" and child ~= Rayfield then
		child:Destroy()
	end
end;
local Main = Rayfield.Main;
local Topbar = Main.Topbar;
local Elements = Main.Elements;
local LoadingFrame = Main.LoadingFrame;
local TabList = Main.TabList;
local Notifications = Rayfield.Notifications;
LoadingFrame.Version.Text = Release;
local request = (syn and syn.request) or (http and http.request) or http_request or request;
local CFileName, CEnabled = nil, false;
local Minimised, Hidden, Debounce = false, false, false;
local SelectedTheme = RayfieldLibrary.Theme.Default;
local function AddDraggingFunctionality(DragPoint, DragFrame)
	local dragging, startPos, frameStartPos;
	DragPoint.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true;
			startPos = input.Position;
			frameStartPos = DragFrame.Position;
			local moveConnection, endConnection;
			moveConnection = UserInputService.InputChanged:Connect(function(moveInput)
				if (moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch) and dragging then
					local delta = moveInput.Position - startPos;
					DragFrame.Position = UDim2.new(frameStartPos.X.Scale, frameStartPos.X.Offset + delta.X, frameStartPos.Y.Scale, frameStartPos.Y.Offset + delta.Y)
				end
			end)
			endConnection = UserInputService.InputEnded:Connect(function(endInput)
				if endInput.UserInputType == input.UserInputType then
					dragging = false;
					moveConnection:Disconnect()
					endConnection:Disconnect()
				end
			end)
		end
	end)
end;
function RayfieldLibrary:ChangeTheme(ThemeName)
	SelectedTheme = RayfieldLibrary.Theme[ThemeName] or RayfieldLibrary.Theme.Default;
	for _, obj in ipairs(Rayfield:GetDescendants()) do
		if obj:IsA("TextLabel") or obj:IsA("TextBox") or obj:IsA("TextButton") then
			if SelectedTheme.TextFont ~= "Default" then
				obj.Font = Enum.Font[SelectedTheme.TextFont]
			end;
			obj.TextColor3 = SelectedTheme.TextColor;
			if obj:IsA("TextBox") then
				obj.PlaceholderColor3 = SelectedTheme.PlaceholderColor
			end
		end
	end;
	Main.BackgroundColor3 = SelectedTheme.Background;
	Topbar.BackgroundColor3 = SelectedTheme.Topbar;
	Topbar.CornerRepair.BackgroundColor3 = SelectedTheme.Topbar;
	Main.Shadow.Image.ImageColor3 = SelectedTheme.Shadow;
	Topbar.ChangeSize.ImageColor3 = SelectedTheme.TextColor;
	Topbar.Hide.ImageColor3 = SelectedTheme.TextColor;
	Topbar.Theme.ImageColor3 = SelectedTheme.TextColor;
	for _, TabPage in ipairs(Elements:GetChildren()) do
		if TabPage:IsA("ScrollingFrame") then
			for _, Element in ipairs(TabPage:GetChildren()) do
				if Element:IsA("Frame") and Element.Name ~= "Placeholder" then
					if Element.Name == "SectionSpacing" or Element.Name == "SectionTitle" then
						continue
					end;
					local isSecondary = Element.Name == "Label" or Element.Name == "Paragraph"
					Element.BackgroundColor3 = isSecondary and SelectedTheme.SecondaryElementBackground or SelectedTheme.ElementBackground;
					Element.UIStroke.Color = isSecondary and SelectedTheme.SecondaryElementStroke or SelectedTheme.ElementStroke;
					if Element:FindFirstChild("Main", true) and Element.Name == "Slider" then
						Element.Main.BackgroundColor3 = SelectedTheme.SliderBackground;
						Element.Main.UIStroke.Color = SelectedTheme.SliderStroke;
						Element.Main.Progress.BackgroundColor3 = SelectedTheme.SliderProgress
					elseif Element:FindFirstChild("Switch", true) and Element.Name == "Toggle" then
						Element.Switch.BackgroundColor3 = SelectedTheme.ToggleBackground
					elseif Element:FindFirstChild("InputFrame", true) or Element:FindFirstChild("KeybindFrame", true) then
						local frame = Element.InputFrame or Element.KeybindFrame;
						frame.BackgroundColor3 = SelectedTheme.InputBackground;
						frame.UIStroke.Color = SelectedTheme.InputStroke
					end
				end
			end
		end
	end;
	for _, TabButton in ipairs(TabList:GetChildren()) do
		if TabButton:IsA("Frame") and TabButton.Name ~= "Template" and TabButton.Name ~= "Placeholder" then
			TabButton.UIStroke.Color = SelectedTheme.TabStroke;
			local isSelected = Elements.UIPageLayout.CurrentPage and TabButton.Name == Elements.UIPageLayout.CurrentPage.Name;
			TabButton.BackgroundColor3 = isSelected and SelectedTheme.TabBackgroundSelected or SelectedTheme.TabBackground;
			TabButton.Title.TextColor3 = isSelected and SelectedTheme.SelectedTabTextColor or SelectedTheme.TabTextColor;
			TabButton.Image.ImageColor3 = isSelected and SelectedTheme.SelectedTabTextColor or SelectedTheme.TabTextColor
		end
	end
end;
local function PackColor(color)
	return {
		R = math.floor(color.R * 255),
		G = math.floor(color.G * 255),
		B = math.floor(color.B * 255)
	}
end;
local function UnpackColor(tbl)
	return Color3.fromRGB(tbl.R, tbl.G, tbl.B)
end;
local function LoadConfiguration()
	if not CEnabled or not CFileName then
		return
	end;
	local path = ConfigurationFolder .. "/" .. CFileName .. ConfigurationExtension;
	if not isfile(path) then
		return
	end;
	local success, data = pcall(HttpService.JSONDecode, HttpService, readfile(path))
	if not success then
		warn("Rayfield: Failed to load configuration -", data)
		return
	end;
	for flagName, flagValue in pairs(data) do
		if RayfieldLibrary.Flags[flagName] then
			task.spawn(function()
				local flagObject = RayfieldLibrary.Flags[flagName]
				if flagObject.Type == "ColorPicker" then
					flagObject:Set(UnpackColor(flagValue))
				else
					flagObject:Set(flagValue)
				end
			end)
		end
	end;
	RayfieldLibrary:Notify({
		Title = "Configuration Loaded",
		Content = "Your settings have been restored."
	})
end;
local function SaveConfiguration()
	if not CEnabled or not CFileName then
		return
	end;
	local data = {}
	for flag, obj in pairs(RayfieldLibrary.Flags) do
		local value = obj.CurrentValue or obj.CurrentKeybind or obj.CurrentOption or obj.Color;
		if obj.Type == "ColorPicker" then
			data[flag] = PackColor(value)
		else
			data[flag] = value
		end
	end;
	local success, result = pcall(HttpService.JSONEncode, HttpService, data)
	if success then
		writefile(ConfigurationFolder .. "/" .. CFileName .. ConfigurationExtension, result)
	else
		warn("Rayfield: Failed to save configuration -", result)
	end
end;
local function AnimateProperty(object, animInfo, property, value)
	if object and typeof(object[property]) ~= "nil" then
		TweenService:Create(object, animInfo, {
			[property] = value
		}):Play()
	end
end;
function Hide()
	if Debounce then
		return
	end;
	Debounce, Hidden = true, true;
	RayfieldLibrary:Notify({
		Title = "Interface Hidden",
		Content = "Press K to unhide.",
		Duration = 4
	})
	local animInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
	TweenService:Create(Main, animInfo, {
		Size = UDim2.new(0, 470, 0, 400),
		Position = UDim2.new(0.5, 0, 0.45, 0)
	}):Play()
	AnimateProperty(Main, animInfo, "BackgroundTransparency", 1)
	for _, v in ipairs(Main:GetDescendants()) do
		AnimateProperty(v, animInfo, "BackgroundTransparency", 1)
		AnimateProperty(v, animInfo, "ImageTransparency", 1)
		AnimateProperty(v, animInfo, "TextTransparency", 1)
		AnimateProperty(v, animInfo, "Transparency", 1)
	end;
	task.wait(animInfo.Time)
	Main.Visible = false;
	Debounce = false
end;
function Unhide()
	if Debounce then
		return
	end;
	Debounce, Hidden = true, false;
	Main.Visible = true;
	local animInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
	local mainSize = Minimised and UDim2.new(0, 495, 0, 45) or UDim2.new(0, 500, 0, 475)
	TweenService:Create(Main, animInfo, {
		Size = mainSize,
		Position = UDim2.new(0.5, 0, 0.5, 0)
	}):Play()
	AnimateProperty(Main, animInfo, "BackgroundTransparency", 0)
	AnimateProperty(Main.Shadow.Image, animInfo, "ImageTransparency", Minimised and 1 or 0.4)
	for _, v in ipairs(Main:GetDescendants()) do
		if v:IsA("UIStroke") then
			AnimateProperty(v, animInfo, "Transparency", 0)
		elseif v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
			AnimateProperty(v, animInfo, "TextTransparency", 0)
		elseif v:IsA("ImageLabel") or v:IsA("ImageButton") then
			AnimateProperty(v, animInfo, "ImageTransparency", (v.Parent == Topbar) and 0.8 or 0)
		else
			AnimateProperty(v, animInfo, "BackgroundTransparency", 0)
		end
	end;
	task.wait(animInfo.Time)
	Debounce = false
end;
function Maximise()
	if Debounce or not Minimised then
		return
	end;
	Debounce, Minimised = true, false;
	Topbar.ChangeSize.Image = "rbxassetid://10137941941"
	local animInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
	TweenService:Create(Main, animInfo, {
		Size = UDim2.new(0, 500, 0, 475)
	}):Play()
	TweenService:Create(Topbar, animInfo, {
		Size = UDim2.new(0, 500, 0, 45)
	}):Play()
	AnimateProperty(Main.Shadow.Image, animInfo, "ImageTransparency", 0.4)
	TabList.Visible = true;
	Elements.Visible = true;
	for _, child in ipairs(TabList:GetChildren()) do
		if child.Name ~= "Template" then
			AnimateProperty(child, animInfo, "Transparency", 0)
		end
	end;
	for _, child in ipairs(Elements:GetChildren()) do
		if child.Name ~= "Template" then
			AnimateProperty(child, animInfo, "Transparency", 0)
		end
	end;
	task.wait(animInfo.Time)
	Debounce = false
end;
function Minimise()
	if Debounce or Minimised then
		return
	end;
	Debounce, Minimised = true, true;
	Topbar.ChangeSize.Image = "rbxassetid://11036884234"
	local animInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
	for _, child in ipairs(TabList:GetChildren()) do
		if child.Name ~= "Template" then
			AnimateProperty(child, animInfo, "Transparency", 1)
		end
	end;
	for _, child in ipairs(Elements:GetChildren()) do
		if child.Name ~= "Template" then
			AnimateProperty(child, animInfo, "Transparency", 1)
		end
	end;
	TweenService:Create(Main, animInfo, {
		Size = UDim2.new(0, 495, 0, 45)
	}):Play()
	TweenService:Create(Topbar, animInfo, {
		Size = UDim2.new(0, 495, 0, 45)
	}):Play()
	AnimateProperty(Main.Shadow.Image, animInfo, "ImageTransparency", 1)
	task.wait(animInfo.Time)
	Elements.Visible = false;
	TabList.Visible = false;
	Debounce = false
end;
function RayfieldLibrary:Notify(settings)
	task.spawn(function()
		local notification = Notifications.Template:Clone()
		notification.Name = settings.Title or "Notification"
		notification.Parent = Notifications;
		notification.BackgroundColor3 = SelectedTheme.NotificationBackground;
		notification.Title.TextColor3 = SelectedTheme.TextColor;
		notification.Description.TextColor3 = SelectedTheme.TextColor;
		notification.Icon.ImageColor3 = SelectedTheme.TextColor;
		notification.Title.Text = settings.Title or "Notification"
		notification.Description.Text = settings.Content or ""
		notification.Icon.Image = settings.Image and "rbxassetid://" .. tostring(settings.Image) or "rbxassetid://3944680095"
		notification.Position = UDim2.new(0.5, 0, 1, 10)
		notification.Visible = true;
		local hasActions = settings.Actions and #settings.Actions > 0;
		local actionCompleted = not hasActions;
		local animInInfo = TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
		TweenService:Create(notification, animInInfo, {
			Position = UDim2.new(0.5, 0, 1, -110)
		}):Play()
		if hasActions then
			task.wait(0.5)
			TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
				Size = UDim2.new(0, 295, 0, 132)
			}):Play()
			task.wait(0.3)
			for _, actionInfo in ipairs(settings.Actions) do
				local action = notification.Actions.Template:Clone()
				action.Name = actionInfo.Name;
				action.Text = actionInfo.Name;
				action.BackgroundColor3 = SelectedTheme.NotificationActionsBackground;
				action.TextColor3 = SelectedTheme.TextColor;
				action.Visible = true;
				action.Parent = notification.Actions;
				action.MouseButton1Click:Connect(function()
					pcall(actionInfo.Callback)
					actionCompleted = true
				end)
				TweenService:Create(action, TweenInfo.new(0.4), {
					BackgroundTransparency = 0,
					TextTransparency = 0
				}):Play()
				task.wait(0.1)
			end
		else
			task.wait(settings.Duration or NotificationDuration)
		end;
		repeat
			task.wait()
		until actionCompleted;
		local animOutInfo = TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
		TweenService:Create(notification, animOutInfo, {
			Position = UDim2.new(0.5, 0, 1, 10)
		}):Play()
		task.wait(animOutInfo.Time)
		notification:Destroy()
	end)
end;
function RayfieldLibrary:CreateWindow(Settings)
	AddDraggingFunctionality(Topbar, Main)
	if Settings.ConfigurationSaving then
		CEnabled = Settings.ConfigurationSaving.Enabled;
		CFileName = Settings.ConfigurationSaving.FileName or tostring(game.PlaceId)
		if CEnabled and not isfolder(ConfigurationFolder) then
			makefolder(ConfigurationFolder)
		end
	end;
	Rayfield.Enabled = true;
	Main.Visible = true;
	LoadingFrame.Visible = true;
	Topbar.Title.Text = Settings.Name or "Rayfield"
	LoadingFrame.Title.Text = Settings.LoadingTitle or "Rayfield"
	LoadingFrame.Subtitle.Text = Settings.LoadingSubtitle or "by Sirius"
	TweenService:Create(Main, TweenInfo.new(0.7, Enum.EasingStyle.Quint), {
		BackgroundTransparency = 0
	}):Play()
	TweenService:Create(Main.Shadow.Image, TweenInfo.new(0.7, Enum.EasingStyle.Quint), {
		ImageTransparency = 0.55
	}):Play()
	Elements.Template.Visible = false;
	TabList.Template.Visible = false;
	local firstTab = true;
	local Window = {}
	function Window:CreateTab(Name, Image)
		local tabButton = TabList.Template:Clone()
		tabButton.Name = Name;
		tabButton.Title.Text = Name;
		if Image then
			tabButton.Image.Image = "rbxassetid://" .. tostring(Image)
			tabButton.Image.Visible = true;
			tabButton.Title.Position = UDim2.new(0, 37, 0.5, 0)
			tabButton.Title.TextXAlignment = Enum.TextXAlignment.Left;
			tabButton.Size = UDim2.new(0, tabButton.Title.TextBounds.X + 46, 0, 30)
		else
			tabButton.Size = UDim2.new(0, tabButton.Title.TextBounds.X + 30, 0, 30)
		end;
		tabButton.Visible = true;
		tabButton.Parent = TabList;
		local tabPage = Elements.Template:Clone()
		tabPage.Name = Name;
		tabPage.Visible = true;
		tabPage.Parent = Elements;
		local function selectTab()
			if Minimised or (Elements.UIPageLayout.CurrentPage == tabPage) then
				return
			end;
			Elements.UIPageLayout:JumpTo(tabPage)
			local animSwitch = TweenInfo.new(0.4, Enum.EasingStyle.Quint)
			for _, otherTab in ipairs(TabList:GetChildren()) do
				if otherTab:IsA("Frame") and otherTab.Name ~= "Template" and otherTab.Name ~= "Placeholder" then
					local isSelected = (otherTab == tabButton)
					TweenService:Create(otherTab, animSwitch, {
						BackgroundColor3 = isSelected and SelectedTheme.TabBackgroundSelected or SelectedTheme.TabBackground,
						BackgroundTransparency = isSelected and 0 or 0.7
					}):Play()
					TweenService:Create(otherTab.Title, animSwitch, {
						TextColor3 = isSelected and SelectedTheme.SelectedTabTextColor or SelectedTheme.TabTextColor,
						TextTransparency = isSelected and 0 or 0.2
					}):Play()
					TweenService:Create(otherTab.Image, animSwitch, {
						ImageColor3 = isSelected and SelectedTheme.SelectedTabTextColor or SelectedTheme.TabTextColor,
						ImageTransparency = isSelected and 0 or 0.2
					}):Play()
					TweenService:Create(otherTab.UIStroke, animSwitch, {
						Transparency = isSelected and 1 or 0
					}):Play()
					TweenService:Create(otherTab.Shadow, animSwitch, {
						ImageTransparency = isSelected and 0.9 or 0.7
					}):Play()
				end
			end
		end;
		tabButton.Interact.MouseButton1Click:Connect(selectTab)
		if firstTab then
			firstTab = false;
			task.defer(selectTab)
		end;
		local Tab = {}
		local sectionAdded = false;
		local function createBaseElement(templateName, settings)
			local element = Elements.Template[templateName]:Clone()
			element.Name = settings.Name or templateName;
			element.Title.Text = settings.Name or ""
			element.Parent = tabPage;
			local isSecondary = element.Name == "Label" or element.Name == "Paragraph"
			element.BackgroundColor3 = isSecondary and SelectedTheme.SecondaryElementBackground or SelectedTheme.ElementBackground;
			element.UIStroke.Color = isSecondary and SelectedTheme.SecondaryElementStroke or SelectedTheme.ElementStroke;
			element.BackgroundTransparency = 1;
			for _, child in ipairs(element:GetDescendants()) do
				AnimateProperty(child, TweenInfo.new(0), "Transparency", 1)
			end;
			local animInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint)
			AnimateProperty(element, animInfo, "BackgroundTransparency", 0)
			for _, child in ipairs(element:GetChildren()) do
				AnimateProperty(child, animInfo, "BackgroundTransparency", 0)
				AnimateProperty(child, animInfo, "ImageTransparency", 0)
				AnimateProperty(child, animInfo, "TextTransparency", 0)
				if child:IsA("UIStroke") then
					AnimateProperty(child, animInfo, "Transparency", 0)
				end
			end;
			element.Visible = true;
			return element
		end;
		local function handleCallback(element, settings, ...)
			local success, err = pcall(settings.Callback, ...)
			if not success then
				warn(("%s Callback Error: %s"):format(settings.Name, tostring(err)))
				local originalColor = element.BackgroundColor3;
				element.BackgroundColor3 = Color3.fromRGB(150, 40, 40)
				task.wait(1.5)
				element.BackgroundColor3 = originalColor
			end;
			SaveConfiguration()
		end;
		function Tab:CreateSection(SectionName)
			if sectionAdded then
				local spacer = Elements.Template.SectionSpacing:Clone()
				spacer.Visible = true;
				spacer.Parent = tabPage
			end;
			local section = Elements.Template.SectionTitle:Clone()
			section.Title.Text = SectionName;
			section.Visible = true;
			section.Parent = tabPage;
			section.Title.TextTransparency = 1;
			TweenService:Create(section.Title, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
				TextTransparency = 0
			}):Play()
			sectionAdded = true;
			local obj = {}
			function obj:Set(newName)
				section.Title.Text = newName
			end;
			return obj
		end;
		function Tab:CreateButton(settings)
			local button = createBaseElement("Button", settings)
			button.MouseEnter:Connect(function()
				TweenService:Create(button, TweenInfo.new(0.2), {
					BackgroundColor3 = SelectedTheme.ElementBackgroundHover
				}):Play()
			end)
			button.MouseLeave:Connect(function()
				TweenService:Create(button, TweenInfo.new(0.2), {
					BackgroundColor3 = SelectedTheme.ElementBackground
				}):Play()
			end)
			button.Interact.MouseButton1Click:Connect(function()
				handleCallback(button, settings)
			end)
			local obj = {}
			function obj:Set(newName)
				button.Name, button.Title.Text = newName, newName
			end;
			return obj
		end;
		function Tab:CreateToggle(settings)
			local toggle = createBaseElement("Toggle", settings)
			settings.CurrentValue = settings.CurrentValue or false;
			toggle.Switch.BackgroundColor3 = SelectedTheme.ToggleBackground;
			local function updateVisual(animate)
				local anim = animate and TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out) or TweenInfo.new(0)
				local state = settings.CurrentValue;
				TweenService:Create(toggle.Switch.Indicator, anim, {
					Position = state and UDim2.new(1, -20, 0.5, 0) or UDim2.new(1, -40, 0.5, 0)
				}):Play()
				toggle.Switch.Indicator.BackgroundColor3 = state and SelectedTheme.ToggleEnabled or SelectedTheme.ToggleDisabled;
				toggle.Switch.Indicator.UIStroke.Color = state and SelectedTheme.ToggleEnabledStroke or SelectedTheme.ToggleDisabledStroke;
				toggle.Switch.UIStroke.Color = state and SelectedTheme.ToggleEnabledOuterStroke or SelectedTheme.ToggleDisabledOuterStroke
			end;
			updateVisual(false)
			toggle.Interact.MouseButton1Click:Connect(function()
				settings.CurrentValue = not settings.CurrentValue;
				updateVisual(true)
				handleCallback(toggle, settings, settings.CurrentValue)
			end)
			if settings.Flag then
				RayfieldLibrary.Flags[settings.Flag] = settings
			end;
			function settings:Set(val)
				settings.CurrentValue = val;
				updateVisual(true)
			end;
			return settings
		end;
		function Tab:CreateSlider(settings)
			local slider = createBaseElement("Slider", settings)
			settings.Range = settings.Range or {
				0,
				100
			}
			settings.Increment = settings.Increment or 1;
			settings.CurrentValue = settings.CurrentValue or settings.Range[1]
			local main = slider.Main;
			main.BackgroundColor3 = SelectedTheme.SliderBackground;
			main.UIStroke.Color = SelectedTheme.SliderStroke;
			main.Progress.BackgroundColor3 = SelectedTheme.SliderProgress;
			local function updateVisuals(value)
				value = math.clamp(value, settings.Range[1], settings.Range[2])
				local percentage = (value - settings.Range[1]) / (settings.Range[2] - settings.Range[1])
				main.Progress.Size = UDim2.new(percentage, 0, 1, 0)
				main.Information.Text = tostring(value) .. (settings.Suffix and " " .. settings.Suffix or "")
			end;
			updateVisuals(settings.CurrentValue)
			local dragging = false;
			main.Interact.InputBegan:Connect(function(i)
				if i.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = true
				end
			end)
			UserInputService.InputEnded:Connect(function(i)
				if i.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
				end
			end)
			RunService.RenderStepped:Connect(function()
				if dragging then
					local mouseX = UserInputService:GetMouseLocation().X;
					local startX, width = main.AbsolutePosition.X, main.AbsoluteSize.X;
					local percentage = math.clamp((mouseX - startX) / width, 0, 1)
					local rawValue = settings.Range[1] + percentage * (settings.Range[2] - settings.Range[1])
					local steppedValue = math.floor(rawValue / settings.Increment + 0.5) * settings.Increment;
					if settings.CurrentValue ~= steppedValue then
						settings.CurrentValue = steppedValue;
						updateVisuals(steppedValue)
						handleCallback(slider, settings, steppedValue)
					end
				end
			end)
			if settings.Flag then
				RayfieldLibrary.Flags[settings.Flag] = settings
			end;
			function settings:Set(val)
				settings.CurrentValue = val;
				updateVisuals(val)
			end;
			return settings
		end;
		function Tab:CreateInput(settings)
			local input = createBaseElement("Input", settings)
			local inputBox = input.InputFrame.InputBox;
			input.InputFrame.BackgroundColor3 = SelectedTheme.InputBackground;
			input.InputFrame.UIStroke.Color = SelectedTheme.InputStroke;
			inputBox.PlaceholderText = settings.PlaceholderText or ""
			inputBox.FocusLost:Connect(function(enterPressed)
				if enterPressed then
					handleCallback(input, settings, inputBox.Text)
					if settings.RemoveTextAfterFocusLost then
						inputBox.Text = ""
					end
				end
			end)
			if settings.Flag then
				RayfieldLibrary.Flags[settings.Flag] = settings
			end;
			function settings:Set(val)
				inputBox.Text = tostring(val)
			end;
			return settings
		end;
		function Tab:CreateKeybind(settings)
			local keybind = createBaseElement("Keybind", settings)
			local keybindBox = keybind.KeybindFrame.KeybindBox;
			keybind.KeybindFrame.BackgroundColor3 = SelectedTheme.InputBackground;
			keybind.KeybindFrame.UIStroke.Color = SelectedTheme.InputStroke;
			settings.CurrentKeybind = settings.CurrentKeybind or "None"
			keybindBox.Text = settings.CurrentKeybind;
			local listening = false;
			keybindBox.Focused:Connect(function()
				listening = true;
				keybindBox.Text = "..."
			end)
			keybindBox.FocusLost:Connect(function()
				listening = false;
				if keybindBox.Text == "..." then
					keybindBox.Text = settings.CurrentKeybind
				end
			end)
			UserInputService.InputBegan:Connect(function(input, processed)
				if listening and not processed and input.UserInputType == Enum.UserInputType.Keyboard then
					local keyName = input.KeyCode.Name;
					settings.CurrentKeybind = keyName;
					keybindBox.Text = keyName;
					keybindBox:ReleaseFocus()
					SaveConfiguration()
				elseif not listening and settings.CurrentKeybind ~= "None" and input.KeyCode.Name == settings.CurrentKeybind and not processed then
					handleCallback(keybind, settings)
				end
			end)
			if settings.Flag then
				RayfieldLibrary.Flags[settings.Flag] = settings
			end;
			function settings:Set(val)
				settings.CurrentKeybind = val;
				keybindBox.Text = val
			end;
			return settings
		end;
		function Tab:CreateDropdown(settings)
			local dropdown = createBaseElement("Dropdown", settings)
			local list, selectedLabel, toggleArrow = dropdown.List, dropdown.Selected, dropdown.Toggle;
			local isOpen = false;
			settings.CurrentOption = type(settings.CurrentOption) == "string" and {
				settings.CurrentOption
			} or (settings.CurrentOption or {})
			local function updateSelectedLabel()
				if #settings.CurrentOption == 0 then
					selectedLabel.Text = "None"
				elseif #settings.CurrentOption == 1 then
					selectedLabel.Text = settings.CurrentOption[1]
				else
					selectedLabel.Text = "Various"
				end
			end;
			updateSelectedLabel()
			for _, optionName in ipairs(settings.Options or {}) do
				local option = dropdown.List.Template:Clone()
				option.Name, option.Title.Text = optionName, optionName;
				option.Visible, option.Parent = true, list;
				local function updateOptionVisual()
					option.BackgroundColor3 = table.find(settings.CurrentOption, optionName) and Color3.fromRGB(40, 40, 40) or Color3.fromRGB(30, 30, 30)
				end;
				updateOptionVisual()
				option.Interact.MouseButton1Click:Connect(function()
					if settings.MultipleOptions then
						local index = table.find(settings.CurrentOption, optionName)
						if index then
							table.remove(settings.CurrentOption, index)
						else
							table.insert(settings.CurrentOption, optionName)
						end
					else
						settings.CurrentOption = {
							optionName
						}
						for _, otherOption in ipairs(list:GetChildren()) do
							if otherOption.Name ~= "Template" then
								otherOption.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
							end
						end
					end;
					updateOptionVisual()
					updateSelectedLabel()
					handleCallback(dropdown, settings, settings.CurrentOption)
					if not settings.MultipleOptions and isOpen then
						dropdown.Interact.MouseButton1Click:Fire()
					end
				end)
			end;
			list:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
				list.CanvasSize = UDim2.fromOffset(0, list.UILayout.AbsoluteContentSize.Y)
			end)
			dropdown.Interact.MouseButton1Click:Connect(function()
				isOpen = not isOpen;
				local anim = TweenInfo.new(0.4, Enum.EasingStyle.Quint)
				if isOpen then
					list.Visible = true;
					TweenService:Create(dropdown, anim, {
						Size = UDim2.new(1, -10, 0, 180)
					}):Play()
					TweenService:Create(toggleArrow, anim, {
						Rotation = 0
					}):Play()
				else
					TweenService:Create(dropdown, anim, {
						Size = UDim2.new(1, -10, 0, 45)
					}):Play()
					TweenService:Create(toggleArrow, anim, {
						Rotation = 180
					}):Play()
					task.delay(anim.Time, function()
						if not isOpen then
							list.Visible = false
						end
					end)
				end
			end)
			if settings.Flag then
				RayfieldLibrary.Flags[settings.Flag] = settings
			end;
			function settings:Set(val)
				settings.CurrentOption = type(val) == "string" and {
					val
				} or val;
				updateSelectedLabel()
				for _, opt in ipairs(list:GetChildren()) do
					if opt.Name ~= "Template" then
						opt.BackgroundColor3 = table.find(settings.CurrentOption, opt.Name) and Color3.fromRGB(40, 40, 40) or Color3.fromRGB(30, 30, 30)
					end
				end
			end;
			return settings
		end;
		function Tab:CreateLabel(LabelText)
			local label = createBaseElement("Label", {
				Name = LabelText
			})
			local obj = {}
			function obj:Set(newText)
				label.Title.Text = newText
			end;
			return obj
		end;
		function Tab:CreateParagraph(settings)
			local paragraph = createBaseElement("Paragraph", settings)
			paragraph.Content.Text = settings.Content or ""
			local function resize()
				paragraph.Content.Size = UDim2.new(1, -20, 0, paragraph.Content.TextBounds.Y)
				paragraph.Size = UDim2.new(1, -10, 0, paragraph.Content.TextBounds.Y + 35)
			end;
			resize()
			local obj = {}
			function obj:Set(newSettings)
				if newSettings.Title then
					paragraph.Title.Text = newSettings.Title
				end;
				if newSettings.Content then
					paragraph.Content.Text = newSettings.Content;
					resize()
				end
			end;
			return obj
		end;
		function Tab:CreateColorPicker(settings)
			settings.Type = "ColorPicker"
			local picker = createBaseElement("ColorPicker", settings)
			local background = picker.CPBackground;
			local display = background.Display;
			local mainCP = background.MainCP;
			local slider = picker.ColorSlider;
			local opened = false;
			settings.Color = settings.Color or Color3.new(1, 1, 1)
			local h, s, v = settings.Color:ToHSV()
			local function updateVisuals()
				local hueColor = Color3.fromHSV(h, 1, 1)
				local finalColor = Color3.fromHSV(h, s, v)
				background.BackgroundColor3 = hueColor;
				mainCP.MainPoint.Position = UDim2.new(s, -mainCP.MainPoint.AbsoluteSize.X / 2, 1 - v, -mainCP.MainPoint.AbsoluteSize.Y / 2)
				mainCP.MainPoint.ImageColor3 = finalColor;
				slider.SliderPoint.Position = UDim2.new(h, -slider.SliderPoint.AbsoluteSize.X / 2, 0.5, 0)
				slider.SliderPoint.ImageColor3 = hueColor;
				display.BackgroundColor3 = finalColor;
				local r, g, b = math.floor(finalColor.R * 255.99), math.floor(finalColor.G * 255.99), math.floor(finalColor.B * 255.99)
				picker.RGB.RInput.InputBox.Text = tostring(r)
				picker.RGB.GInput.InputBox.Text = tostring(g)
				picker.RGB.BInput.InputBox.Text = tostring(b)
				picker.HexInput.InputBox.Text = ("#%02X%02X%02X"):format(r, g, b)
				settings.Color = finalColor
			end;
			local function onUpdate()
				updateVisuals()
				handleCallback(picker, settings, settings.Color)
			end;
			updateVisuals()
			picker.Interact.MouseButton1Click:Connect(function()
				opened = not opened;
				local anim = TweenInfo.new(0.4, Enum.EasingStyle.Quint)
				if opened then
					TweenService:Create(picker, anim, {
						Size = UDim2.new(1, -10, 0, 150)
					}):Play()
					TweenService:Create(background, anim, {
						Transparency = 0
					}):Play()
				else
					TweenService:Create(picker, anim, {
						Size = UDim2.new(1, -10, 0, 45)
					}):Play()
					TweenService:Create(background, anim, {
						Transparency = 1
					}):Play()
				end
			end)
			local mainDragging, sliderDragging = false, false;
			mainCP.InputBegan:Connect(function(i)
				if i.UserInputType == Enum.UserInputType.MouseButton1 then
					mainDragging = true
				end
			end)
			slider.InputBegan:Connect(function(i)
				if i.UserInputType == Enum.UserInputType.MouseButton1 then
					sliderDragging = true
				end
			end)
			UserInputService.InputEnded:Connect(function(i)
				if i.UserInputType == Enum.UserInputType.MouseButton1 then
					mainDragging, sliderDragging = false, false
				end
			end)
			RunService.RenderStepped:Connect(function()
				if mainDragging then
					local mousePos = UserInputService:GetMouseLocation()
					local framePos, frameSize = mainCP.AbsolutePosition, mainCP.AbsoluteSize;
					s = math.clamp((mousePos.X - framePos.X) / frameSize.X, 0, 1)
					v = 1 - math.clamp((mousePos.Y - framePos.Y) / frameSize.Y, 0, 1)
					onUpdate()
				end;
				if sliderDragging then
					local mousePos = UserInputService:GetMouseLocation()
					local framePos, frameSize = slider.AbsolutePosition, slider.AbsoluteSize;
					h = math.clamp((mousePos.X - framePos.X) / frameSize.X, 0, 1)
					onUpdate()
				end
			end)
			local function handleTextInput(box, component)
				local num = tonumber(box.Text)
				if num and num >= 0 and num <= 255 then
					local r, g, b = settings.Color.R * 255, settings.Color.G * 255, settings.Color.B * 255;
					if component == "R" then
						r = num
					elseif component == "G" then
						g = num
					else
						b = num
					end;
					h, s, v = Color3.fromRGB(r, g, b):ToHSV()
					onUpdate()
				else
					updateVisuals()
				end
			end;
			picker.RGB.RInput.InputBox.FocusLost:Connect(function()
				handleTextInput(picker.RGB.RInput.InputBox, "R")
			end)
			picker.RGB.GInput.InputBox.FocusLost:Connect(function()
				handleTextInput(picker.RGB.GInput.InputBox, "G")
			end)
			picker.RGB.BInput.InputBox.FocusLost:Connect(function()
				handleTextInput(picker.RGB.BInput.InputBox, "B")
			end)
			picker.HexInput.InputBox.FocusLost:Connect(function()
				local r, g, b = picker.HexInput.InputBox.Text:match("#?(%x%x)(%x%x)(%x%x)")
				if r and g and b then
					h, s, v = Color3.fromRGB(tonumber(r, 16), tonumber(g, 16), tonumber(b, 16)):ToHSV()
					onUpdate()
				else
					updateVisuals()
				end
			end)
			if settings.Flag then
				RayfieldLibrary.Flags[settings.Flag] = settings
			end;
			function settings:Set(color)
				settings.Color = color;
				h, s, v = color:ToHSV()
				updateVisuals()
			end;
			return settings
		end;
		return Tab
	end;
	task.wait(1)
	local animOut = TweenInfo.new(0.5, Enum.EasingStyle.Quint)
	TweenService:Create(LoadingFrame, animOut, {
		BackgroundTransparency = 1
	}):Play()
	task.wait(0.2)
	local animMain = TweenInfo.new(0.7, Enum.EasingStyle.Quint)
	TweenService:Create(Main, animMain, {
		Size = UDim2.new(0, 500, 0, 475)
	}):Play()
	task.wait(0.5)
	LoadingFrame.Visible = false;
	Topbar.Visible = true;
	Elements.Visible = true;
	TweenService:Create(Topbar, animMain, {
		BackgroundTransparency = 0
	}):Play()
	return Window
end;
function RayfieldLibrary:Destroy()
	if Rayfield and Rayfield.Parent then
		Rayfield:Destroy()
	end
end;
Topbar.ChangeSize.MouseButton1Click:Connect(function()
	if Minimised then
		Maximise()
	else
		Minimise()
	end
end)
Topbar.Hide.MouseButton1Click:Connect(function()
	if Hidden then
		Unhide()
	else
		Hide()
	end
end)
Topbar.Theme.MouseButton1Click:Connect(function()
	self:ChangeTheme(SelectedTheme == RayfieldLibrary.Theme.Default and "Light" or "Default")
end)
UserInputService.InputBegan:Connect(function(input, processed)
	if input.KeyCode == Enum.KeyCode.K and not processed then
		if Hidden then
			Unhide()
		else
			Hide()
		end
	end
end)
for _, btn in ipairs(Topbar:GetChildren()) do
	if btn:IsA("ImageButton") then
		btn.MouseEnter:Connect(function()
			TweenService:Create(btn, TweenInfo.new(0.2), {
				ImageTransparency = 0
			}):Play()
		end)
		btn.MouseLeave:Connect(function()
			TweenService:Create(btn, TweenInfo.new(0.2), {
				ImageTransparency = 0.8
			}):Play()
		end)
	end
end;
task.delay(3, LoadConfiguration)
if Rayfield:FindFirstChild("Notice") then
	Rayfield.Notice.Visible = true;
	Rayfield.Notice.Interact.MouseButton1Click:Connect(function()
		Rayfield.Notice:Destroy()
	end)
end;
return RayfieldLibrary
